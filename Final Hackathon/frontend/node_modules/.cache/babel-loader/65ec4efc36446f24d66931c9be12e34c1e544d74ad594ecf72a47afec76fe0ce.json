{"ast":null,"code":"import axios from 'axios';\n\n// Configure axios defaults\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napiClient.interceptors.response.use(response => {\n  console.log(`Response from ${response.config.url}:`, response.status);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('Response error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const apiService = {\n  // Budget endpoints\n  uploadBudget: async file => {\n    const formData = new FormData();\n    formData.append('budget', file);\n    const response = await apiClient.post('/upload-budget', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  getBudgetStatus: async () => {\n    const response = await apiClient.get('/budget/status');\n    return response.data;\n  },\n  getBudgetData: async () => {\n    const response = await apiClient.get('/budget/data');\n    return response.data;\n  },\n  // Expense endpoints\n  trackExpense: async expenseData => {\n    const response = await apiClient.post('/track-expense', expenseData);\n    return response.data;\n  },\n  getExpenses: async () => {\n    const response = await apiClient.get('/expenses/list');\n    return response.data;\n  },\n  getBudgetUsage: async () => {\n    const response = await apiClient.get('/expenses/usage');\n    return response.data;\n  },\n  trackBulkExpenses: async expenses => {\n    const response = await apiClient.post('/expenses/bulk', {\n      expenses\n    });\n    return response.data;\n  },\n  // Breach detection endpoints\n  detectBreaches: async () => {\n    const response = await apiClient.post('/detect-breaches');\n    return response.data;\n  },\n  // Recommendations endpoints\n  generateRecommendations: async () => {\n    const response = await apiClient.post('/generate-recommendations');\n    return response.data;\n  },\n  // Escalation endpoints\n  sendEscalation: async () => {\n    const response = await apiClient.post('/send-escalation');\n    return response.data;\n  },\n  // Agent endpoints\n  getAgentStatus: async () => {\n    const response = await apiClient.get('/agents/status');\n    return response.data;\n  },\n  checkAgentHealth: async () => {\n    const response = await apiClient.get('/agents/health');\n    return response.data;\n  },\n  processCompleteFlow: async flowData => {\n    const response = await apiClient.post('/agents/process-flow', flowData);\n    return response.data;\n  },\n  // Dashboard endpoints\n  getDashboard: async () => {\n    const response = await apiClient.get('/dashboard');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  // Manual workflow triggers\n  triggerWorkflow: async (workflowType, data = {}) => {\n    const response = await apiClient.post('/agents/trigger-workflow', {\n      workflowType,\n      data\n    });\n    return response.data;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","apiService","uploadBudget","file","formData","FormData","append","post","getBudgetStatus","get","getBudgetData","trackExpense","expenseData","getExpenses","getBudgetUsage","trackBulkExpenses","expenses","detectBreaches","generateRecommendations","sendEscalation","getAgentStatus","checkAgentHealth","processCompleteFlow","flowData","getDashboard","healthCheck","triggerWorkflow","workflowType"],"sources":["D:/Agent Ai/Agentic_AI_Workshop/Final Hackathon/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configure axios defaults\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`Response from ${response.config.url}:`, response.status);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const apiService = {\r\n  // Budget endpoints\r\n  uploadBudget: async (file) => {\r\n    const formData = new FormData();\r\n    formData.append('budget', file);\r\n    \r\n    const response = await apiClient.post('/upload-budget', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getBudgetStatus: async () => {\r\n    const response = await apiClient.get('/budget/status');\r\n    return response.data;\r\n  },\r\n\r\n  getBudgetData: async () => {\r\n    const response = await apiClient.get('/budget/data');\r\n    return response.data;\r\n  },\r\n\r\n  // Expense endpoints\r\n  trackExpense: async (expenseData) => {\r\n    const response = await apiClient.post('/track-expense', expenseData);\r\n    return response.data;\r\n  },\r\n\r\n  getExpenses: async () => {\r\n    const response = await apiClient.get('/expenses/list');\r\n    return response.data;\r\n  },\r\n\r\n  getBudgetUsage: async () => {\r\n    const response = await apiClient.get('/expenses/usage');\r\n    return response.data;\r\n  },\r\n\r\n  trackBulkExpenses: async (expenses) => {\r\n    const response = await apiClient.post('/expenses/bulk', { expenses });\r\n    return response.data;\r\n  },\r\n\r\n  // Breach detection endpoints\r\n  detectBreaches: async () => {\r\n    const response = await apiClient.post('/detect-breaches');\r\n    return response.data;\r\n  },\r\n\r\n  // Recommendations endpoints\r\n  generateRecommendations: async () => {\r\n    const response = await apiClient.post('/generate-recommendations');\r\n    return response.data;\r\n  },\r\n\r\n  // Escalation endpoints\r\n  sendEscalation: async () => {\r\n    const response = await apiClient.post('/send-escalation');\r\n    return response.data;\r\n  },\r\n\r\n  // Agent endpoints\r\n  getAgentStatus: async () => {\r\n    const response = await apiClient.get('/agents/status');\r\n    return response.data;\r\n  },\r\n\r\n  checkAgentHealth: async () => {\r\n    const response = await apiClient.get('/agents/health');\r\n    return response.data;\r\n  },\r\n\r\n  processCompleteFlow: async (flowData) => {\r\n    const response = await apiClient.post('/agents/process-flow', flowData);\r\n    return response.data;\r\n  },\r\n\r\n  // Dashboard endpoints\r\n  getDashboard: async () => {\r\n    const response = await apiClient.get('/dashboard');\r\n    return response.data;\r\n  },\r\n\r\n  // Health check\r\n  healthCheck: async () => {\r\n    const response = await apiClient.get('/health');\r\n    return response.data;\r\n  },\r\n\r\n  // Manual workflow triggers\r\n  triggerWorkflow: async (workflowType, data = {}) => {\r\n    const response = await apiClient.post('/agents/trigger-workflow', {\r\n      workflowType,\r\n      data\r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}